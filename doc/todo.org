#+TITLE: Notes and things to be done.
#+AUTHOR: Mark Cox

* Best practices document.
Produce a best practices document which outlines what I know about how
to use the ~CHAINS~ system so far.

Include things such as
- A global ~designs.lisp~ file that contains all experiment designs.
- Each design should begin with a separate package. This avoids being
  tempted to over design. Experience shows that it is highly likely
  for two tasks to have the same name, but have different operations.

* Composition of task input functions
One of the problems with the ~CHAINS~ system is that it is not
possible to easily do something like the following.
#+begin_src lisp
  (define-task-input image-pathnames)
  (define-task-input images)
  
  (define-task-input-function image-pathnames task ((task select-subject))
    ;; Some code that produces image pathnames.
    )
  
  (define-task-input-function images task ((task select-subject))
    (mapcar #'load-images (image-pathnames)))
#+end_src

It needs to be investigated whether this is a good idea. Perhaps it
could also be written as
#+begin_src lisp
  (defgeneric image-pathnames (task))
  (defgeneric images (task))
  
  (images (task-value (contains-task-p 'select-subject chain)))
#+end_src

There is an argument for making task inputs functions themselves as it
would make it easier to implement result produce functions. For
example
#+begin_src lisp
  (defun output-results (directory chain area)
    (let* ((images (images chain area)))
      (save-images-to-directory directory images)))
#+end_src

An upshot of this is the simplification of the
~DEFINE-OPERATION~. Consider an example of ~DEFINE-OPERATION~ using
the chains system as currently defined.
#+begin_src lisp
(define-operation (task compute-task) ((images images))
  (compute-stuff images))
#+end_src
If task input functions were functions themselves. It would no longer
be required to specify the task inputs to the operation. i.e.
#+begin_src lisp
  (define-operation (task compute-task)
    (compute-stuff (images)))
#+end_src

Further more, the ~DEFINE-OPERATION~ macro could be removed entirely. 
#+begin_src lisp
  (defmethod perform-operation ((task compute-task))
    (compute-stuff (images)))
#+end_src

The prototypes for the task input functions would be as follows.
#+begin_src lisp
  (defun images (&optional current-task performed-tasks area))
#+end_src
The above is contrary to the example involving the implementation of
result producing functions. An alternative would be
#+begin_src lisp
  (defun images (&optional chain area))
#+end_src
where it is implied that the last task in the chain is the target task
and the other tasks are the performed tasks. The later seems more
inline with the result use case. When ~CHAIN~ and ~AREA~ are nil, they
can be assigned the values of the ~*CHAIN*~ and ~*AREA*~ variables.

* Iterative execution parameters.
Repeatedly executing the same operation with different /execution/
parameters is occurring more frequently than anticipated. Consider
adding support for it as a another package.
* Destructuring chains
Add a macro ~WITH-TASKS~ which establishes lexical bindings
for particular tasks in the chain.
#+begin_src lisp
  (let ((chain (list (make-instance 'task-1) (make-instance 'task-2) (make-instance 'task-3))))
    (with-tasks ((task-1 'task-1)
                 (task-3 'task-3))
        chain
      (print task-1)
      (print task-3)))
#+end_src
* Interrupting PARALLEL-PERFORM
Sending an interrupt during CHAINS.PEE:PARALLEL-PERFORM does not kill
the threads/processes that are executing the tasks.

The code does not catch any conditions that are signalled whilst the
following is code from PARALLEL-PERFORM is being executed.
#+begin_src lisp
  (map nil #'bordeaux-threads:join-thread (processes queue))
#+end_src
* Evaluating task inputs for a given chain outside of PERFORM.
The ability to compute the task input for a given chain is
particularly useful for computing results. No such function exists in
chains at present.
* Queries
Consider the following two sequences of chains.
#+begin_src lisp
  (let ((chains-1 (list (list task-1 task-2 task-3 task-4) ...))
        (chains-2 (list (list task-1 task-2 task-3 OTHER task-4) ..)))
    )
#+end_src

It is common to treat the output of task-4 to be of interest, but
grouped according the other tasks as being equal. i.e.

#+begin_src lisp
  (let ((groups (chains:group-chains chains-1 '(and (= task-1) (= task-2) (= task-3)))))
    ...)
#+end_src

The grouping expression passed to ~CHAINS:GROUP-CHAINS~ would need to
change for the second chain above.
#+begin_src lisp
  (let ((groups (chains:group-chains chains-2 '(and (= task-1) (= task-2) (= task-3) (= other)))))
    ...)
#+end_src

Consider adding a ~BEFORE-TASK~ sort expression such that:
#+begin_src lisp
  (let ((groups (chains:group-chains chains-1 '(= (before-task other)))))
    ...)
#+end_src

It is probably worth consider providing the ability to extend the
language of the expressions supported by ~GROUP-CHAINS~.
* OUTPUT and ERROR arguments for PREPARE-XARGS-SCRIPT.
